ggplot(e,aes(x = x, y = y)) + geom_boxplot()
ggplot(e,aes(x = x, y = y)) + geom_bar()
ggplot(e,aes(x = x, y = y)) + geom_crossbar()
ggplot(e,aes(x = x, y = y)) + geom_dotplot()
ggplot(e,aes(x = x, y = y)) + geom_point()
ggplot(e,aes(x = x, y = y-2)) + geom_point()
ggplot(e,aes(x = x, y = y-2)) + geom_histogram()
ggplot(e,aes(y = y-2)) + geom_histogram()
ggplot(e,aes(y = y-2)) + geom_histogram(b)
b
ggplot(e,aes(b)) + geom_histogram()
ggplot(e,aes(b)) + geom_histogram(binwidth = 1.5)
ggplot(e,aes(b)) + geom_histogram(binwidth = 1)
ggplot(e,aes(b)) + geom_histogram(binwidth = 0.001)
ggplot(e,aes(b)) + geom_histogram(binwidth = 0.00001)
ggplot(e,aes(b)) + geom_histogram(binwidth = 0.0001)
ggplot(e,aes(b)) + geom_histogram(bins = 200)
setwd("~/")
datap = read.csv("Sheet1.csv")
datap
D = data.frame(datap$xi, datap$yi)
D
library(ggplot2)
ggplot(D, aes(x = datap.xi, y = datap.yi)) + geom_dotplot()
ggplot(D, aes(x = datap.xi, y = datap.yi)) + geom_point()
ggplot(D, aes(x = datap.xi, y = datap.yi)) + geom_point() + geom_abline()
ggplot(D, aes(x = datap.xi, y = datap.yi)) + geom_point() + geom_line()
ggplot(D, aes(x = datap.xi, y = datap.yi)) + geom_abline()
ggplot(D, aes(x = datap.xi, y = datap.yi)) + geom_line()
lm(datap.yi ~ datap.xi, data = D)
S = lm(datap.yi ~ datap.xi, data = D)
S$coefficients[1]
S$coefficients[2]
ggplot(D, aes(x = datap.xi, y = datap.yi)) + geom_point() + geom_abline(data = datap,slope = S$coefficients[2],intercept = S$coefficients[1])
ggplot(D, aes(x = datap.xi, y = datap.yi)) + geom_point() + geom_abline(data = datap,slope = S$coefficients[2],intercept = S$coefficients[1],colour = "red")
library(neuralnet)
library(MASS)
set.seed(1)
data = Boston
max_data = apply(data, 2, max)
min_data = apply(data, 2, min)
max_data
View(Boston)
min_data
data_scale = scale(data, center = min_data, scale = max_data - min_data)
n = names(data)
n
f = as.formula(paste("medv ~", paste(n[!n %in% "medv"], collapse = "+")))
f
index = sample(1:nrow(data),round(0.70*nrow(data)))
index
train_data = as.data.frame(data_scale[index,])
test_data = as.data.frame(data_scale[-index,])
test_data
net_data = neuralnet(f, data = train_data,hidden = 10,linear.output = T)
plot(net_data)
setwd("~/")
library(ggplot2)
library(MASS)
data_bwight = read.csv("bwght.csv")
data_bwight
names(data_bwight)
names(data_bwight[0])
Xl = lm(X...bwght ~ cigs + faminc, data = data_bwight)
summary(Xl)
plot(Xl)
X = lm(X...bwght ~ cigs, data = data_bwight)
summary(X)
hprice1 = read.csv("hprice1.csv")
hprice1.header
hprice1
hP = lm(price ~ sqrft + bdrms)
hP = lm(price ~ sqrft + bdrms, data = hprice1)
summary(hP)
charity = read.csv("charity.csv")
summary(lm(gift ~ mailsyear + giftlast + propresp, data = charity))
data_salary = read.csv("lawsch85.csv")
names(data_salary)
data_salary["salary"]
data_salary["salary"] = log(data_salary["salary"])
is.na(data_salary["salary"])
data_salary = read.csv("lawsch85.csv")
data_salary["salary"]
is.na(data_salary["salary"])
data_salary["salary"] = log(data_salary["salary"],na.rm = TRUE)
data_salary["salary"] = log(data_salary["salary"])
data_salary["salary"]
data_salary["libvol"]
data_salary["libvol"][153,1]
data_salary["libvol"]
data_salary["libvol"][153]
print(data_salary["libvol"][153,1])
data_salary["libvol"][153,1] = "NA"
data_salary = read.csv("lawsch85.csv")
data_salary["libvol"]
data_salary["cost"]
data_salary["salary"] = log(data_salary["salary"])
data_salary["cost"] = log(data_salary["cost"])
data_salary["libvol"] = log(data_salary["libvol"])
View(data_salary)
SL = lm(salary ~ lsat + gpa + libvol + rank + cost, data = data_salary)
summary(SL)
data_salary = read.csv("lawsch85.csv")
data_salary["clsize"]
is.na(data_salary["clsize"])
data_salary["salary"] = log(data_salary["salary"])
data_salary["cost"] = log(data_salary["cost"])
data_salary["libvol"] = log(data_salary["libvol"])
SL = lm(salary ~ lsat + gpa + libvol + rank + cost + clsize + faculty, data = data_salary)
summary(SL)
2.2e-16
hprice1 = read.csv("hprice1.csv")
hprice1.header
hP = lm(price ~ sqrft + bdrms, data = hprice1)
hprice1 = read.csv("hprice1.csv")
hP = lm(price ~ sqrft + bdrms, data = hprice1)
summary(hP)
hP = lm(log(price) ~ sqrft + bdrms, data = hprice1)
summary(hP)
hprice1 = read.csv("hprice1.csv")
hprice1["price"] = log(hprice1["price"])
hP = lm(price ~ sqrft + bdrms, data = hprice1)
summary(hP)
hprice1
hprice1["new"] = hprice1["sqrft"] - 150*hprice1["bdrms"]
hP = lm(price ~ new + bdrms, data = hprice1)
summary(hP)
abline(hP)
anova(hP)
anova(SL)
?anova
vif(SL)
vcov(SL)
AIC(SL)
kielmc = read.csv("kielmc.csv")
KI = lm(log(price) ~ log(dist), data = kielmc)
summary(KI)
View(kielmc)
kielmc["price"] = log(kielmc["price"])
kielmc["dist"] = log(kielmc["dist"])
summary(lm(price ~ dist,data = kielmc))
kielmc = read.csv("kielmc.csv")
KIadd = lm(log(price) ~ log(dist) + log(intst) + log(area) + log(land) + rooms + baths + X...age, data = kielmc)
summary(KLadd)
kielmc = read.csv("kielmc.csv")
KIadd = lm(log(price) ~ log(dist) + log(intst) + log(area) + log(land) + rooms + baths + X...age, data = kielmc)
summary(KIadd)
kielmc = read.csv("kielmc.csv")
KIadd = lm(log(price) ~ log(dist) + log(intst) + log(intst)^2 + log(area) + log(land) + rooms + baths + X...age, data = kielmc)
summary(KIadd)
anova(KIadd)
KIadd = lm(log(price) ~ log(dist) + log(intst) + [log(intst)]^2 + log(area) + log(land) + rooms + baths + X...age, data = kielmc)
KIadd = lm(log(price) ~ log(dist) + log(intst) + (log(intst))^2 + log(area) + log(land) + rooms + baths + X...age, data = kielmc)
summary(KIadd)
kielmc = read.csv("kielmc.csv")
kielmc["log(intst)^2""] = (log(kielmc["intst"]))^2
kielmc["log(intst)^2"] = (log(kielmc["intst"]))^2
kielmc = read.csv("kielmc.csv")
kielmc["log(intst)^2"] = (log(kielmc["intst"]))^2
KIadd = lm(log(price) ~ log(dist) + log(intst) + log(intst)^2 + log(area) + log(land) + rooms + baths + X...age, data = kielmc)
summary(KIadd)
kielmc = read.csv("kielmc.csv")
kielmc["(intst)^2"] = (log(kielmc["intst"]))^2
KIadd = lm(log(price) ~ log(dist) + log(intst) + intst^2 + log(area) + log(land) + rooms + baths + X...age, data = kielmc)
summary(KIadd)
kielmc = read.csv("kielmc.csv")
kielmc["(intst2"] = (log(kielmc["intst"]))^2
KIadd = lm(log(price) ~ log(dist) + log(intst) + intst2 + log(area) + log(land) + rooms + baths + X...age, data = kielmc)
kielmc["intst2"] = (log(kielmc["intst"]))^2
KIadd = lm(log(price) ~ log(dist) + log(intst) + intst2 + log(area) + log(land) + rooms + baths + X...age, data = kielmc)
summary(KIadd)
kielmc = read.csv("kielmc.csv")
kielmc["intst2"] = (log(kielmc["intst"]))^2
KIadd = lm(log(price) ~ log(dist) + log(intst) + intst2 + log(area) + log(land) + rooms + baths + X...age, data = kielmc)
summary(KIadd)
anova(KIadd)
kielmc = read.csv("kielmc.csv")
kielmc["dist2"] = (log(kielmc["dist"]))^2
kielmc["intst2"] = (log(kielmc["intst"]))^2
KIadd = lm(log(price) ~ log(dist)+ dist2 + log(intst) + intst2 + log(area) + log(land) + rooms + baths + X...age, data = kielmc)
summary(KIadd)
anova(KIadd)
wage1 = read.csv("wage1.csv")
wage["exper2"] = wage1["exper"]^2
wage1["exper2"] = wage1["exper"]^2
wage1mode = lm(log(wage) ~ educ + exper + exper2, data = wage1)
summary(wage1mode)
wage1 = read.csv("wage1.csv")
wage1["exper2"] = wage1["exper"]^2
wage1mode = lm(log(wage) ~ educ + exper + exper2, data = wage1)
summary(wage1mode)
wage1 = read.csv("wage1.csv")
wage1["educANDexper"] = wage1["educ"]*wage1["exper"]
wage1mode = lm(log(wage) ~ educ + exper + educANDexper, data = wage1)
summary(wage1mode)
View(wage1)
wage2 = read.csv("wage2.6.csv")
wage2["educANDexper"] = wage2["educ"]*wage1["exper"]
wage2["educANDexper"] = wage2["educ"]*wage2["exper"]
wage2mode = lm(log(wage) ~ educ + exper + educANDexper, data = wage2)
summary(wage2mode)
wage2 = read.csv("wage2.6.csv")
wage2["educANDexper"] = wage2["educ"]*wage1["exper"]
wage2 = read.csv("wage2.6.csv")
wage2["educANDexper"] = wage2["educ"]*wage2["exper"]
wage2mode = lm(log(wage) ~ educ + exper + educANDexper, data = wage2)
summary(wage2mode)
wage2 = read.csv("wage2.6.csv")
wage2["educANDexperM10"] = wage2["educ"]*(wage1["exper"]-10)
wage2["educANDexperM10"] = wage2["educ"]*(wage2["exper"]-10)
wage2mode = lm(log(wage) ~ educ + exper + educANDexperM10, data = wage2)
summary(wage2mode)
wage2 = read.csv("wage2.6.csv")
wage2["educANDexperM10"] = wage2["educ"]*(wage2["exper"]-10)
wage2mode = lm(log(wage) ~ educ + exper + educANDexperM10, data = wage2)
summary(wage2mode)
anova(SL)
SL
plot(SL)
nos = read.csv("no.csv")
nos
nos["y"]
lm(y ~ X1 + X2 + X3 + X4, data = nos)
summary(lm(y ~ X1+X2+X3+X4, data = nos))
nos1 = read.csv("no1.csv")
summary(lm(y ~ X1+X2+X3+X4, data = no1))
summary(lm(y ~ X1+X2+X3+X4, data = nos1))
plot(lm(y ~ X1+X2+X3+X4, data = nos1))
nos1
x = runif(1000,1,10)
u = x * rnorm(1000)
y = 1 + 2*x + u
plot(x,y)
data1 = data.frame(x,y)
data1
ols = lm(y ~ x, data = data1)
summary(ols)
plot(ols)
bptest(ols)
ols = lm(y ~ x, random = ~ 1/x,data = data1)
ols = lme(y ~ x, random = ~ 1/x,data = data1)
x = runif(1000,1,10)
x = runif(1000,1,10)
u = x * rnorm(1000)
y = 1 + 2 * x + u
data1 = data.frame(x,y)
ols = lm(y ~ x, data = data1)
xm = 1/x
ym = y/x
data2 = data.frame(xm,ym)
wls = lm(ym ~ xm,data = data2)
summary(ols)
summary(wls)
x = runif(1000,1,10)
dt(x,998,0.025)
x = runif(1000, 1, 10)
u = x * rnorm(1000)
y = 1 + 2 * x + u
data1 = data.class(x,y)
data1 = data.frame(x,y)
data1
library(ggplot2)
ggplot(data = data1,aes(x = x, y = y)) + geom_point(colour = "red")
ols = lm(y ~ x,data = data1)
ols$coefficients
ggplot(data = data1,aes(x = x, y = y)) + geom_point(colour = "red")+ geom_abline(slope = ols$coefficients[1],intercept = ols$coefficients[0],colour = "blue")
ols$coefficients[1]
ggplot(data = data1,aes(x = x, y = y)) + geom_point(colour = "red")+ geom_abline(slope = ols$coefficients[2],intercept = ols$coefficients[1],colour = "blue")
ym = y/x
xm = 1/x
data2 = data.frame(xm,ym)
wls = lm(ym ~ xm,data = data2)
wls$coefficients
ggplot(data = data1,aes(x = x, y = y)) + geom_point(colour = "red")+ geom_abline(slope = ols$coefficients[2],intercept = ols$coefficients[1],colour = "blue") + geom_abline(slope = wls$coefficients[1],intercept = wls$coefficients[2],colour = "black")
plot(wls)
plot(ols)
e =y - (ols$coefficients[1] + x * ols$coefficients[2])
qplot(x,e)
e2 = y - (wls$coefficients[2] + x * wls$coefficients[1])
qplot(x,e2)
e2 = ym - (wls$coefficients[1] + xm * wls$coefficients[2])
qplot(x,e2)
qplot(y,e2)
qplot(ym,e2)
geom_abline(slope = ols$coefficients[1], intercept = ols$coefficients[2], colour = "blue") + geom_abline(slope = wls$coefficients[2], intercept = wls$coefficients[1], colour = "green")
ggplot(data = data2, aes(x = xm, y = ym)) + geom_point(colour = "red") + geom_abline(slope = ols$coefficients[1], intercept = ols$coefficients[2], colour = "blue") + geom_abline(slope = wls$coefficients[2], intercept = wls$coefficients[1], colour = "green")
ggplot(data = data1,aes(x = x, y = y)) + geom_point(colour = "red") + geom_abline(slope = ols$coefficients[2], intercept = ols$coefficients[1],colour = "blue") + geom_abline(slope = wls$coefficients[1], intercept = wls$coefficients[2], colour = "green")
e_wls = ym - wls$coefficients[1] - xm * wls$coefficients[2]
qplot(xm, e_wls)
e_ols = y - ols$coefficients[1] - x * ols$coefficients[2]
qplot(x,e_ols)
qplot(x, e_wls)
e_wls = ym * x - wls$coefficients[1] * x - xm * wls$coefficients[2] * x
qplot(x, e_wls)
wls$coefficients
confint<-function(x,sigma=-1,alpha=0.05)
{
n<-length(x)
xb<-mean(x)
if(sigma>=0)
{
tmp<-sigma/sqrt(n)*qnorm(1-alpha/2);df<-n
}
else{
tmp<-sd(x)/sqrt(n)*qt(1-alpha/2,n-1);df<- n-1
}
data.frame(mean=xb,df=df,a=xb-tmp,b=xb+tmp)
}
summary(wls)
confint(x,0.177)
predict(wls,newdata = data2,interval = c("confidence"), level = 0.95)
plot(x, y, type = "n")
points(x,y)
abline(wls, lwd =2)
newx <- seq(min(xm), max(xm), length = 200)
lines(newx, pred[,2], col = "red", lty = 2)
pred = predict(wls,newdata = data2,interval = c("confidence"), level = 0.95)
lines(newx, pred[,2], col = "red", lty = 2)
newx <- seq(min(x), max(x), length = 200)
lines(newx, pred[,2], col = "red", lty = 2)
fitted()
fitted(wls)
resid(wls)
con<-predict.lm(wls,data2,interval="confidence",level=0.95)
con
install.packages("car")
library(car)
library(carData)
library(car)
ncvTest(wls)
ncvTest(ols)
x = runif(1000,1,10)
u = rnorm(1000)
y = 1 + 2 * x + u
datas = data.frame(x,y)
ols1 = lm(y ~ x, data = datas)
summary(ols1)
X = runif(1000,1,10)
v = rnorm(1000)
v
class(V)
V
v
class(v)
v[0]
v[1]
u = []
u = linspace(1,10)
u = array()
u
u[1]
u[2]
u[0]
u[0] = 0
u[1]
u[0]
u[1] = 1
u[1]
u[1] = v[1]
?for (variable in vector) {
}
for(i in 2:1000){print(i)}
for(i in 2:1000){u[i] = 0.5 * u[i-1] + v[i]}
u
y = 1 + 2 * X +u
data_test = data.frame(X,y)
summary(y ~ X,data = data_test)
ols = lm(y ~ X,data = data_test)
summary(ols)
plot(ols)
?dwtest
install.packages("lmtest")
library(lmtest)
library(zoo)
library(lmtest)
dwtest(ols)
res = dwtest(ols)
res$statistic
p = 1 - res$statistic/2
for(i in 2:1000){y[i]= y[i] - p*y[i-1]}
for(i in 2:1000){X[i]= X[i] - p*X[i-1]}
data_change = data.frame(X,y)
ols_change = lm(y~X,data = data_change)
summary(ols_change)
dwtest(ols_change)
summary(ols_cha)
library(zoo)
library(lmtest)
x = runif(1000,1,10)
v = rnorm(1000)
u = array()
u[1] = v[1]
for(i in 2:1000){u[i] = u[i-1]*0.5 + v[i]}
y = 1 + 2*x + u
data_o = data.frame(x,y)
ols_org = lm(y~x,data = data_o)
dwtest(ols_org)
p = 1 - dwtest(ols_org)$statistic/2
for(i in 2:1000){y[i] = y[i] - p * y[i-1]}
for(i in 2:1000){x[i] = x[i] - p * x[i-1]}
data_cha = data.frame(x,y)
ols_cha = lm(y~x,data = data_cha)
summary(ols_org)
summary(ols_cha)
library(zoo)
library(lmtest)
x = runif(1000,1,10)
v = rnorm(1000)
u = array()
u[1] = v[1]
for(i in 2:1000){u[i] = u[i-1]*0.5 + v[i]}
y = 1 + 2*x + u
data_o = data.frame(x,y)
ols_org = lm(y~x,data = data_o)
dwtest(ols_org)
p = 1 - dwtest(ols_org)$statistic/2
for(i in 2:1000){y[i] = y[i] - p * y[i-1]}
for(i in 2:1000){x[i] = x[i] - p * x[i-1]}
data_cha = data.frame(x,y)
ols_cha = lm(y~x,data = data_cha)
summary(ols_org)
summary(ols_cha)
dwtest(ols_cha)
dwtest(ols_org)
library(zoo)
library(lmtest)
x = runif(1000,1,10)
v = rnorm(1000)
u = array()
u[1] = v[1]
for(i in 2:1000){u[i] = u[i-1]*0.5 + v[i]}
y = 1 + 2*x + u
data_o = data.frame(x,y)
ols_org = lm(y~x,data = data_o)
dwtest(ols_org)
p = 1 - dwtest(ols_org)$statistic/2
for(i in 2:1000){y[i] = y[i] - p * y[i-1]}
for(i in 2:1000){x[i] = x[i] - p * x[i-1]}
data_cha = data.frame(x,y)
ols_cha = lm(y~x,data = data_cha)
summary(ols_org)
summary(ols_cha)
dwtest(ols_cha)
dwtest(ols_org)
library(zoo)
library(lmtest)
x = runif(1000,1,10)
v = rnorm(1000)
u = array()
u[1] = v[1]
for(i in 2:1000){u[i] = u[i-1]*0.5 + v[i]}
y = 1 + 2*x + u
data_o = data.frame(x,y)
ols_org = lm(y~x,data = data_o)
dwtest(ols_org)
p = 1 - dwtest(ols_org)$statistic/2
for(i in 2:1000){y[i] = y[i] - p * y[i-1]}
for(i in 2:1000){x[i] = x[i] - p * x[i-1]}
data_cha = data.frame(x,y)
ols_cha = lm(y~x,data = data_cha)
summary(ols_org)
summary(ols_cha)
dwtest(ols_cha)
dwtest(ols_org)
library(zoo)
library(lmtest)
library(ggplot2)
B1 = read.csv('B1.csv')
head(B1)
B1['X...y']
B1[0,0]
B1[1,1]
df = data.frame(y = B1['X...y',x = B1['x8'])
df = data.frame(y = B1['X...y'],x = B1['x8'])
head(df)
names(df)[names(df) == 'X...y'] <- 'y'
head(df)
ggplot(data = df,aes(x = x, y = y)) + geom_point()
df
ggplot(data = df,aes(x = x8, y = y)) + geom_point()
model-ols = lm(y ~ x8, data = df)
model_ols = lm(y ~ x8, data = df)
summary(model_ols)
anova(model_ols)
ggplot(data = df,aes(x = x8, y = y)) + geom_point(colour = "red")+ geom_abline(slope = model_ols$coefficients[1],intercept = model_ols$coefficients[0],colour = "blue")
model_ols$coefficients[1]
model_ols$coefficients[2]
ggplot(data = df,aes(x = x8, y = y)) + geom_point(colour = "red")+ geom_abline(slope = model_ols$coefficients[2],intercept = model_ols$coefficients[1],colour = "blue")
ggplot(data = df,aes(x = x8, y = y)) + geom_point(colour = "red")+ geom_abline(slope = model_ols$coefficients[2],intercept = model_ols$coefficients[1],colour = "blue")+geom_text()
ggplot(data = df,aes(x = x8, y = y,label = x8)) + geom_point(colour = "red")+ geom_abline(slope = model_ols$coefficients[2],intercept = model_ols$coefficients[1],colour = "blue")+geom_text()
ggplot(data = df,aes(x = x8, y = y,label = y)) + geom_point(colour = "red")+ geom_abline(slope = model_ols$coefficients[2],intercept = model_ols$coefficients[1],colour = "blue")+geom_text()
ggplot(data = df,aes(x = x8, y = y,label = x8)) + geom_point(colour = "red")+ geom_abline(slope = model_ols$coefficients[2],intercept = model_ols$coefficients[1],colour = "blue")+geom_text()
ggplot(data = df,aes(x = x8, y = y,label = x8)) + geom_point(colour = "red")+ geom_abline(slope = model_ols$coefficients[2],intercept = model_ols$coefficients[1],colour = "blue")+geom_text()+geom_label()
install.packages("readxl")
library(readxl)
library(readxl)
setwd("~/linear_regression/Data Sets/Appendices")
d = read_excel("data-ttable-B1.xls")
d = read_excel("~/data-ttable-B1.xls")
d = read_excel("~/data-table-B1.xls")
d = read_excel("data-table-B1.xls")
d
result = lm(y~x8,data = d)
result
summary(result)
rstandard(result)
summary(aov(y ~ x8, data = d))
RStudio.Version()
installr()
install.packages("installr")
library(installr)
??R
